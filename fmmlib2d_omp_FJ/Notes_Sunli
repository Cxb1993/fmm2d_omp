c  box - an integer array dimensioned box(15). its elements describe 
c        the box number ibox, as follows:
c
c       1. level - the level of subdivision on which this box 
c             was constructed; 
c       2, 3  - the coordinates of this box among  all
c             boxes on this level
c       4 - the daddy of this box, identified by it address
c             in array boxes
c       5,6,7,8 - the  list of children of this box 
c             (eight of them, and the child is identified by its address
c             in the array boxes; if a box has only one child, only the
c             first of the four child entries is non-zero, etc.)
c       9 - the location in the array iz of the particles 
c             living in this box
c       10 - the number of particles living in this box
c       11 - the location in the array iztarg of the targets
c             living in this box
c       12 - the number of targets living in this box
c       13 - source box type: 0 - empty, 1 - leaf node, 2 - sub-divided
c       14 - target box type: 0 - empty, 1 - leaf node, 2 - sub-divided
c       15 - reserved for future use
c  boxes - each boxes(*,ibox) is a box element (defined above) for
c          the box number ibox
c  center - the center of the box number ibox 
c  corners - the corners of the box number ibox 





c  z - the user-specified points in the space
c  n - the number of elements in array z
c  nbox - the maximum number of points in a box on the finest level
c  lw - the amount of memory in the array w (in integer elements)
c
c                            output parameters:
c
c  ier - error return code
c    ier=0   means successful execution
c    ier=32  means that the amount lw of space in array w
c                 is insufficient
c    ier=16 means that the subroutine attempted to construct more 
c        than 199 levels of subdivision; indicates bad trouble.
c    ier=64  means that the amount lw of space in array w
c                 is severely insufficient
c  nboxes - the total number of boxes created
c  iz - the integer array addressing the particles in 
c         all boxes. 
c       explanation: for a box ibox, the particles living in
c         it are:
c
c         (z(1,j),z(2,j)),(z(1,j+1),z(2,j+1)),
c         (z(1,j+2),z(2,j+2)), . . . 
c         (z(1,j+nj-1),z(2,j+nj-1)),
c         (z(1,j+nj),z(2,j+nj)),
c
c         with j=boxes(9,ibox), and nj=boxes(10,ibox)
c        
c  iztarg - the integer array addressing the targets in 
c         all boxes. 
c
c         (ztarg(1,j),ztag(2,j)),
c         (ztarg(1,j+1),ztarg(2,j+1)),
c         (ztarg(1,j+2),ztarg(2,j+2)), . . . 
c         (ztarg(1,j+nj-1),ztarg(2,j+nj-1)),
c         (ztarg(1,j+nj),ztarg(2,j+nj)),
c
c         with j=boxes(11,ibox), and nj=boxes(12,ibox)
c
c  laddr - an integer array dimensioned (2,nlev), describing the
c         numbers of boxes on various levels of subdivision, so that
c         the first box on level (i-1) has sequence number laddr(1,i),
c         and there are laddr(2,i) boxes on level i-1
c  nlev - the maximum level number on which any boxes have 
c         been created. the maximum number possible is 200. 
c         it is recommended that the array laddr above be 
c         dimensioned at least (2,200), in case the user underestimates
c         the number of levels required.
c  center - the center of the box on the level 0, containing
c         the whole simulation
c  size - the side of the box on the level 0
c  w - the array containing all tables describing boxes, lists, etc. 
c         it is a link-list (for the most part), and can only be accessed
c         via the entries d2tgetb, d2tgetl, d2tlinfo, of this  subroutine 
c         (see below). the first lused 777 integer locations of 
c         this array should not be altered between the call to this
c         entry and subsequent calls to the entries d2tgetb, d2tgetl,
c         d2tlinfo, of this  subroutine 
c        
c  lused777 - the amount of space in the array w (in integer words)
c        that is occupied by various tables on exit from this 
c        subroutine. this space should not be altered between the
c        call to this entry and subsequent calls to entries d2tgetb,
c        d2tgetl, d2tlinfo, of this  subroutine (see below).
c
c
c
c              note on the list conventions. 
c
c    list 1 of the box ibox - the list of all boxes with which the
c           box ibox interacts directly, including the boxes on the 
c           same level as ibox, boxes on the finer levels, and boxes 
c           on the coarser levels. obviously, list 1 is empty for any
c           box that is not childless.
c
c    list 2 of the box ibox - the list of all boxes with which the
c           box ibox interacts in the regular multipole fashion, i.e. 
c           boxes on the same level as ibox that are separated from it
c           but whose daddies are not separated from the daddy of ibox.
c
c    list 3 of the box ibox - for a childless ibox, the list of all 
c           boxes on the levels finer than that of ibox, which are 
c           separated from ibox, and whose daddys are not separated 
c           from ibox. for a box with children, list 3 is empty.
c           
c    list 4 is dual to list 3, i.e. jbox is on the list 4 of ibox if 
c           and only if ibox is on the list 3 of jbox. 
c
c    list 5 of the box ibox - the list of all boxes at the same level 
c           that are adjacent to the box ibox - the list of colleagues




0 Construct FMM tree structure 
[lfmm2dparttree] - lfmm2drouts.f
[d2tstrcrem] - d2tstrcr.f
[d2tallbem] - d2tstrcr.f


1 FMM computation [cfmm2dparttargmain] - cfmm2dpart.f
1.1 S2M:
   (1) l2dzero: set multipole coefficient to zero
   (2) l2dformmp: compute multipole coefficient from S (charges)
   (3) l2dformmp_dp: compute multipole coeff from S (dipoles)
   (4) l2dadd: add two sets of coefficients

1.2 S2L? [itype = 4]
  (1) l2dformta: construct local expansion from S


1.3 M2M 
  (1) l2dmpmp: M2M operator
  (2) l2dmpmp_carray: M2M operator using precomputed carray
    (2.1) carray[variable]: binomial coefficients

1.4 M2L - to all boxes in list2 of ibox
  (1) l2dmploc: M2L operator
  (2) l2dmploc_carray

1.5 L2L
  (1) l2dlocloc: L2L operator
  (2) l2dlocloc_carray

1.6 M2T? [itype = 3]
  (1) c2dmpeval: evaluate multiple expansion at a specific T
  (2) c2dmpevalall: evaluate multipole expansion at all T's

1.7 L2T
  (1) c2dtaeval: evaluate local expansion at a specific T
  (2) c2dtaevalall: ... all T's

1.8 S2T
  (1) cfmm2dpart_direct_self_sym: direct S2T operator inside ibox
  (2) cfmm2dpart_direct: direct S2T operator, for all boxes in List1
  of ibox
  


